using System.IO.Abstractions.TestingHelpers;
using Application.UnitTests.Common;
using Application.UnitTests.Common.Fixture;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using ResourcePackerGUI.Application.Common.Interfaces;
using ResourcePackerGUI.Application.Packaging.Handlers;
using ResourcePackerGUI.Application.Packaging.Queries;
using ResourcePackerGUI.Domain.Entities;
using Xunit;

namespace Application.UnitTests.Packaging
{
    [Collection(QueryCollection.CollectionName)]
    public class BuildPackageQueryHandlerTests
    {
        private readonly IAesEncryptionService _aesEncryptionService;
        private readonly ICrc32Service _crc32Service;
        private readonly ILogger<BuildPackageQueryHandler> _logger;

        private readonly Dictionary<string, MockFileData> _mockFiles = new()
        {
            { "F:\\repos\\ResourcePacker\\Debug\\assets\\base.png", new MockFileData(SampleBasePng) },
            { "F:\\repos\\ResourcePacker\\Debug\\assets\\mushroom-red.png", new MockFileData(SampleMushroomRedPng) },
        };

        private readonly List<PathEntry> _pathEntries = new()
        {
            new PathEntry("F:\\repos\\ResourcePacker\\Debug\\assets\\base.png", "assets/base.png"),
            new PathEntry("F:\\repos\\ResourcePacker\\Debug\\assets\\mushroom-red.png", "assets/mushroom-red.png")
        };

        public BuildPackageQueryHandlerTests(QueryTestFixture fixture)
        {
            _aesEncryptionService = fixture.AesEncryptionService;
            _crc32Service = fixture.Crc32Service;
            _logger = new NullLogger<BuildPackageQueryHandler>();
        }

        [Fact]
        public async Task BuildPackage()
        {
            var fileSystem = new MockFileSystem(_mockFiles, "F:\\repos\\ResourcePacker\\Debug\\");
            const string output = "F:\\repos\\ResourcePacker\\Debug\\assets.dat";

            var query = new BuildPackageQuery(_pathEntries, output);
            var sut = new BuildPackageQueryHandler(fileSystem, _aesEncryptionService, _crc32Service, _logger);
            await sut.Handle(query, default);
            Assert.True(fileSystem.FileExists(output));

            var outputFile = fileSystem.GetFile(output);
            Assert.NotNull(outputFile);
            Assert.Equal(ExpectedResourcePack, outputFile.Contents);
        }

        [Fact]
        public async Task BuildPackage_WithEncryption()
        {
            var fileSystem = new MockFileSystem(_mockFiles, "F:\\repos\\ResourcePacker\\Debug\\");
            const string output = "F:\\repos\\ResourcePacker\\Debug\\assets.dat";

            var query = new BuildPackageQuery(_pathEntries, output, "test123");
            var sut = new BuildPackageQueryHandler(fileSystem, _aesEncryptionService, _crc32Service, _logger);
            await sut.Handle(query, default);
            Assert.True(fileSystem.FileExists(output));

            var outputFile = fileSystem.GetFile(output);
            Assert.NotNull(outputFile);
            Assert.Equal(ExpectedResourcePackEncrypted, outputFile.Contents);
        }

        #region Sample files

        private static readonly byte[] SampleBasePng = {
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 128,
            0, 0, 0, 16, 4, 3, 0, 0, 0, 44, 118, 106, 187, 0, 0, 0, 48, 80, 76, 84, 69,
            0, 136, 238, 0, 29, 132, 0, 32, 137, 1, 40, 154, 0, 27, 128, 1, 47, 166, 1,
            56, 186, 1, 49, 172, 0, 38, 148, 1, 55, 182, 0, 35, 143, 1, 44, 161, 1, 43,
            158, 1, 53, 178, 1, 52, 176, 0, 34, 141, 61, 118, 69, 151, 0, 0, 0, 249, 73,
            68, 65, 84, 56, 203, 149, 211, 177, 13, 194, 48, 16, 133, 97, 86, 200, 8,
            185, 21, 220, 48, 0, 43, 156, 82, 208, 179, 1, 242, 0, 52, 22, 27, 100, 133,
            244, 84, 89, 193, 43, 120, 5, 23, 94, 0, 222, 225, 7, 138, 18, 132, 225, 75,
            82, 222, 175, 147, 98, 239, 14, 212, 209, 157, 28, 205, 228, 105, 164, 29,
            109, 2, 211, 29, 15, 2, 23, 250, 35, 32, 53, 128, 121, 179, 220, 64, 117,
            214, 118, 64, 170, 137, 28, 41, 220, 110, 218, 14, 72, 95, 173, 3, 71, 176,
            68, 51, 208, 55, 55, 200, 57, 227, 107, 110, 16, 166, 48, 65, 88, 110, 96,
            13, 12, 67, 13, 156, 240, 108, 3, 20, 200, 145, 26, 108, 144, 233, 68, 239,
            64, 247, 250, 7, 210, 139, 185, 210, 34, 0, 95, 2, 7, 20, 186, 15, 27, 68,
            227, 98, 84, 74, 25, 210, 167, 13, 186, 122, 134, 132, 174, 20, 73, 135,
            161, 6, 82, 202, 246, 110, 3, 44, 72, 85, 2, 69, 194, 236, 217, 36, 218, 6,
            72, 74, 41, 82, 68, 214, 1, 44, 224, 189, 122, 109, 6, 48, 43, 40, 172, 54,
            152, 227, 115, 250, 151, 128, 224, 2, 217, 6, 46, 24, 23, 102, 192, 124,
            244, 195, 235, 4, 166, 52, 54, 3, 248, 246, 206, 142, 192, 126, 113, 141,
            135, 167, 17, 5, 36, 198, 117, 224, 1, 119, 108, 147, 212, 68, 91, 165, 163,
            0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130
        };

        private static readonly byte[] SampleMushroomRedPng = {
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 23,
            0, 0, 0, 28, 4, 3, 0, 0, 0, 120, 195, 57, 80, 0, 0, 0, 27, 80, 76, 84, 69,
            0, 0, 0, 65, 43, 15, 163, 65, 25, 191, 119, 33, 100, 48, 20, 84, 58, 24,
            108, 72, 20, 148, 109, 39, 119, 61, 23, 105, 144, 33, 67, 0, 0, 0, 1, 116,
            82, 78, 83, 0, 64, 230, 216, 102, 0, 0, 0, 154, 73, 68, 65, 84, 24, 211,
            173, 205, 193, 17, 194, 32, 16, 5, 80, 116, 44, 32, 123, 32, 103, 39, 161,
            2, 215, 131, 71, 81, 10, 144, 195, 218, 129, 164, 2, 39, 237, 251, 191, 144,
            104, 1, 217, 3, 252, 55, 252, 29, 220, 22, 51, 96, 214, 204, 81, 253, 230,
            253, 48, 42, 113, 36, 144, 245, 132, 227, 188, 64, 217, 188, 18, 90, 17, 18,
            86, 8, 198, 20, 137, 17, 43, 41, 138, 136, 115, 55, 214, 19, 98, 238, 42,
            66, 244, 226, 133, 64, 9, 157, 156, 209, 114, 119, 213, 32, 6, 116, 21, 124,
            192, 122, 131, 101, 177, 142, 72, 122, 17, 145, 82, 30, 4, 62, 243, 214,
            151, 249, 69, 28, 248, 95, 63, 205, 111, 2, 106, 104, 179, 243, 19, 106, 43,
            74, 249, 195, 179, 216, 2, 39, 102, 249, 7, 12, 174, 15, 163, 151, 35, 40,
            163, 228, 20, 209, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130
        };

        #endregion Samples

        #region Expected resource packages

        /// <summary>
        /// A resource package created with the original command-line tool.
        /// </summary>
        private static readonly byte[] ExpectedResourcePack = {
            82, 101, 115, 80, 97, 99, 107, 0, 0, 0, 0, 0, 2, 0, 0, 0, 242, 55, 197, 92,
            45, 34, 206, 74, 110, 1, 0, 0, 110, 1, 0, 0, 56, 0, 0, 0, 105, 58, 158, 97,
            98, 40, 155, 241, 7, 1, 0, 0, 7, 1, 0, 0, 166, 1, 0, 0, 137, 80, 78, 71, 13,
            10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 128, 0, 0, 0, 16, 4, 3, 0,
            0, 0, 44, 118, 106, 187, 0, 0, 0, 48, 80, 76, 84, 69, 0, 136, 238, 0, 29,
            132, 0, 32, 137, 1, 40, 154, 0, 27, 128, 1, 47, 166, 1, 56, 186, 1, 49, 172,
            0, 38, 148, 1, 55, 182, 0, 35, 143, 1, 44, 161, 1, 43, 158, 1, 53, 178, 1,
            52, 176, 0, 34, 141, 61, 118, 69, 151, 0, 0, 0, 249, 73, 68, 65, 84, 56,
            203, 149, 211, 177, 13, 194, 48, 16, 133, 97, 86, 200, 8, 185, 21, 220, 48,
            0, 43, 156, 82, 208, 179, 1, 242, 0, 52, 22, 27, 100, 133, 244, 84, 89, 193,
            43, 120, 5, 23, 94, 0, 222, 225, 7, 138, 18, 132, 225, 75, 82, 222, 175,
            147, 98, 239, 14, 212, 209, 157, 28, 205, 228, 105, 164, 29, 109, 2, 211,
            29, 15, 2, 23, 250, 35, 32, 53, 128, 121, 179, 220, 64, 117, 214, 118, 64,
            170, 137, 28, 41, 220, 110, 218, 14, 72, 95, 173, 3, 71, 176, 68, 51, 208,
            55, 55, 200, 57, 227, 107, 110, 16, 166, 48, 65, 88, 110, 96, 13, 12, 67,
            13, 156, 240, 108, 3, 20, 200, 145, 26, 108, 144, 233, 68, 239, 64, 247,
            250, 7, 210, 139, 185, 210, 34, 0, 95, 2, 7, 20, 186, 15, 27, 68, 227, 98,
            84, 74, 25, 210, 167, 13, 186, 122, 134, 132, 174, 20, 73, 135, 161, 6, 82,
            202, 246, 110, 3, 44, 72, 85, 2, 69, 194, 236, 217, 36, 218, 6, 72, 74, 41,
            82, 68, 214, 1, 44, 224, 189, 122, 109, 6, 48, 43, 40, 172, 54, 152, 227,
            115, 250, 151, 128, 224, 2, 217, 6, 46, 24, 23, 102, 192, 124, 244, 195,
            235, 4, 166, 52, 54, 3, 248, 246, 206, 142, 192, 126, 113, 141, 135, 167,
            17, 5, 36, 198, 117, 224, 1, 119, 108, 147, 212, 68, 91, 165, 163, 0, 0, 0,
            0, 73, 69, 78, 68, 174, 66, 96, 130, 137, 80, 78, 71, 13, 10, 26, 10, 0, 0,
            0, 13, 73, 72, 68, 82, 0, 0, 0, 23, 0, 0, 0, 28, 4, 3, 0, 0, 0, 120, 195,
            57, 80, 0, 0, 0, 27, 80, 76, 84, 69, 0, 0, 0, 65, 43, 15, 163, 65, 25, 191,
            119, 33, 100, 48, 20, 84, 58, 24, 108, 72, 20, 148, 109, 39, 119, 61, 23,
            105, 144, 33, 67, 0, 0, 0, 1, 116, 82, 78, 83, 0, 64, 230, 216, 102, 0, 0,
            0, 154, 73, 68, 65, 84, 24, 211, 173, 205, 193, 17, 194, 32, 16, 5, 80, 116,
            44, 32, 123, 32, 103, 39, 161, 2, 215, 131, 71, 81, 10, 144, 195, 218, 129,
            164, 2, 39, 237, 251, 191, 144, 104, 1, 217, 3, 252, 55, 252, 29, 220, 22,
            51, 96, 214, 204, 81, 253, 230, 253, 48, 42, 113, 36, 144, 245, 132, 227,
            188, 64, 217, 188, 18, 90, 17, 18, 86, 8, 198, 20, 137, 17, 43, 41, 138,
            136, 115, 55, 214, 19, 98, 238, 42, 66, 244, 226, 133, 64, 9, 157, 156, 209,
            114, 119, 213, 32, 6, 116, 21, 124, 192, 122, 131, 101, 177, 142, 72, 122,
            17, 145, 82, 30, 4, 62, 243, 214, 151, 249, 69, 28, 248, 95, 63, 205, 111,
            2, 106, 104, 179, 243, 19, 106, 43, 74, 249, 195, 179, 216, 2, 39, 102, 249,
            7, 12, 174, 15, 163, 151, 35, 40, 163, 228, 20, 209, 0, 0, 0, 0, 73, 69, 78,
            68, 174, 66, 96, 130
        };

        /// <summary>
        /// A resource package created with the original command-line tool. <br/>
        /// Encrypted with password: test123
        /// </summary>
        private static readonly byte[] ExpectedResourcePackEncrypted = {
            82, 101, 115, 80, 97, 99, 107, 0, 0, 0, 0, 0, 2, 0, 0, 0, 242, 55, 197, 92,
            45, 34, 206, 74, 110, 1, 0, 0, 112, 1, 0, 0, 56, 0, 0, 0, 105, 58, 158, 97,
            98, 40, 155, 241, 7, 1, 0, 0, 16, 1, 0, 0, 168, 1, 0, 0, 42, 249, 232, 90,
            127, 226, 133, 63, 140, 196, 207, 234, 229, 148, 119, 45, 128, 17, 141, 135,
            0, 178, 174, 181, 46, 234, 138, 135, 226, 174, 126, 189, 42, 129, 216, 1,
            221, 103, 237, 17, 122, 138, 148, 144, 98, 248, 224, 16, 28, 203, 138, 226,
            4, 193, 165, 116, 201, 74, 185, 228, 153, 192, 183, 154, 188, 9, 66, 222,
            164, 103, 38, 110, 231, 60, 40, 25, 172, 153, 115, 208, 168, 79, 25, 16,
            107, 48, 180, 93, 209, 13, 47, 170, 183, 88, 60, 51, 222, 67, 24, 210, 215,
            49, 198, 58, 47, 208, 221, 41, 119, 82, 230, 214, 37, 187, 18, 182, 229, 92,
            107, 135, 244, 111, 100, 46, 179, 134, 170, 168, 141, 198, 114, 161, 5, 81,
            49, 191, 229, 134, 154, 129, 95, 191, 59, 119, 254, 126, 7, 165, 199, 166,
            117, 136, 160, 167, 135, 118, 85, 190, 122, 29, 233, 205, 136, 44, 194, 131,
            102, 218, 7, 181, 168, 194, 173, 177, 32, 8, 233, 250, 252, 38, 205, 15,
            242, 177, 69, 144, 180, 225, 64, 150, 81, 112, 135, 193, 142, 47, 196, 3,
            81, 60, 217, 216, 195, 84, 20, 230, 24, 59, 146, 184, 121, 191, 136, 127,
            188, 213, 28, 28, 173, 18, 241, 34, 198, 248, 54, 30, 138, 125, 89, 116,
            120, 115, 2, 213, 20, 245, 182, 93, 176, 251, 204, 161, 58, 14, 175, 122,
            18, 51, 129, 221, 244, 236, 233, 25, 165, 113, 187, 93, 226, 68, 147, 251,
            4, 47, 98, 102, 173, 110, 174, 63, 214, 160, 221, 202, 253, 213, 131, 187,
            150, 55, 173, 79, 143, 216, 61, 13, 20, 28, 229, 174, 120, 158, 179, 214,
            143, 16, 243, 54, 212, 105, 56, 230, 45, 205, 234, 209, 163, 132, 94, 183,
            172, 130, 197, 210, 102, 88, 77, 78, 37, 141, 255, 196, 160, 156, 43, 210,
            222, 70, 58, 184, 131, 108, 233, 35, 177, 216, 140, 214, 35, 99, 172, 101,
            209, 205, 98, 232, 49, 84, 225, 145, 48, 109, 57, 13, 93, 23, 253, 189, 240,
            161, 144, 33, 88, 59, 59, 108, 12, 109, 42, 249, 232, 90, 127, 226, 133, 63,
            140, 196, 207, 234, 229, 148, 119, 45, 185, 179, 142, 240, 225, 190, 91,
            249, 120, 122, 38, 24, 51, 215, 211, 137, 55, 111, 79, 181, 187, 211, 79,
            198, 40, 73, 58, 182, 134, 160, 134, 17, 195, 166, 38, 51, 49, 86, 44, 194,
            167, 64, 91, 237, 236, 232, 246, 6, 124, 174, 111, 172, 140, 168, 111, 141,
            173, 127, 139, 192, 54, 180, 176, 38, 15, 12, 148, 128, 12, 243, 195, 103,
            236, 15, 77, 147, 82, 106, 168, 38, 92, 182, 211, 248, 146, 95, 133, 66,
            107, 214, 245, 128, 230, 41, 65, 165, 185, 187, 116, 136, 24, 81, 16, 138,
            60, 107, 254, 200, 129, 242, 46, 228, 66, 245, 28, 76, 239, 61, 154, 98,
            112, 181, 232, 123, 176, 201, 25, 121, 13, 167, 135, 111, 252, 30, 196, 189,
            219, 178, 43, 45, 220, 102, 245, 105, 191, 78, 8, 209, 192, 133, 237, 28,
            195, 36, 173, 3, 29, 2, 253, 115, 31, 72, 18, 38, 182, 13, 111, 172, 18,
            191, 131, 38, 213, 194, 181, 61, 90, 135, 212, 147, 131, 61, 185, 235, 82,
            227, 138, 63, 196, 233, 75, 35, 202, 17, 194, 244, 54, 255, 90, 102, 151,
            126, 139, 189, 213, 131, 137, 93, 19, 23, 247, 230, 141, 119, 33, 160, 42,
            44, 107, 39, 196, 243, 118, 217, 179, 29, 122, 39, 174, 176, 41, 47, 200,
            108, 60, 224, 10, 168, 111, 234, 138, 121, 91, 10, 113, 163, 140, 234, 57,
            171, 190, 139, 49, 115, 211, 160
        };

        #endregion Expected
    }
}