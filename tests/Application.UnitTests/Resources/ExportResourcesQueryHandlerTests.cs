using System.IO.Abstractions.TestingHelpers;
using ResourcePackerGUI.Application.Resources.Handlers;
using ResourcePackerGUI.Application.Resources.Queries;
using ResourcePackerGUI.Domain.Entities;

namespace Application.UnitTests.Resources
{
    public class ExportResourcesQueryHandlerTests
    {
        private readonly List<Resource> _resources = new()
        {
            new Resource(SampleAcceptPng, default, name: "accept.png"),
            new Resource(SampleAsteriskOrangePng, default, name: "asterisk_orange.png"),
            new Resource(SampleAwardStarGoldPng, default, name: "award_star_gold_3.png"),
        };

        [Fact]
        public async Task ExportResources()
        {
            var fileSystem = new MockFileSystem(new Dictionary<string, MockFileData>(), "F:\\assets\\");
            var query = new ExportResourcesQuery("F:\\assets\\", _resources);
            var sut = new ExportResourcesQueryHandler(fileSystem);
            await sut.Handle(query, default);
            Assert.Equal(SampleAcceptPng, fileSystem.GetFile("F:\\assets\\accept.png").Contents);
            Assert.Equal(SampleAsteriskOrangePng, fileSystem.GetFile("F:\\assets\\asterisk_orange.png").Contents);
            Assert.Equal(SampleAwardStarGoldPng, fileSystem.GetFile("F:\\assets\\award_star_gold_3.png").Contents);
        }

        [Fact]
        public async Task ExportResources_HandlesConflicts()
        {
            var files = new Dictionary<string, MockFileData>
            {
                {"F:\\assets\\accept.png", new MockFileData("Should be ignored")},
                {"F:\\assets\\asterisk_orange.png", new MockFileData("Should be overwritten")},
                {"F:\\assets\\award_star_gold_3.png", new MockFileData("Should not be overwritten")}
            };

            var conflictFileReplacements = new Dictionary<Resource, string>
            {
                {_resources[1], "F:\\assets\\asterisk_orange.png"},
                {_resources[2], "F:\\assets\\award_star_gold_3 (1).png"}
            };

            var fileSystem = new MockFileSystem(files, "F:\\assets\\");
            var query = new ExportResourcesQuery("F:\\assets\\", _resources, conflictFileReplacements);
            var sut = new ExportResourcesQueryHandler(fileSystem);
            await sut.Handle(query, default);
            Assert.NotEqual(SampleAcceptPng, fileSystem.GetFile("F:\\assets\\accept.png").Contents);
            Assert.Equal(SampleAsteriskOrangePng, fileSystem.GetFile("F:\\assets\\asterisk_orange.png").Contents);
            Assert.NotEqual(SampleAwardStarGoldPng, fileSystem.GetFile("F:\\assets\\award_star_gold_3.png").Contents);
            Assert.Equal(SampleAwardStarGoldPng, fileSystem.GetFile("F:\\assets\\award_star_gold_3 (1).png").Contents);
        }

        #region Sample data

        private static readonly byte[] SampleAcceptPng =
        {
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16,
            0, 0, 0, 16, 8, 3, 0, 0, 0, 40, 45, 15, 83, 0, 0, 1, 23, 80, 76, 84, 69, 0,
            0, 0, 89, 192, 54, 31, 117, 27, 83, 188, 47, 30, 113, 26, 30, 111, 26, 46,
            150, 28, 83, 186, 44, 31, 116, 27, 60, 163, 30, 38, 142, 28, 31, 112, 27,
            49, 152, 28, 75, 180, 38, 66, 173, 31, 30, 127, 27, 30, 122, 27, 85, 192,
            52, 50, 157, 29, 32, 138, 27, 29, 108, 26, 89, 194, 54, 66, 171, 31, 31,
            131, 27, 85, 190, 52, 91, 194, 57, 66, 169, 31, 32, 136, 28, 31, 122, 27,
            31, 120, 27, 31, 113, 27, 89, 190, 52, 61, 164, 30, 38, 143, 28, 94, 197,
            59, 82, 183, 43, 31, 126, 27, 96, 199, 61, 94, 197, 59, 255, 255, 255, 111,
            197, 98, 115, 185, 91, 181, 224, 173, 151, 204, 134, 117, 201, 105, 114,
            200, 103, 253, 254, 252, 191, 228, 184, 183, 225, 176, 175, 220, 165, 162,
            215, 149, 156, 216, 146, 154, 208, 139, 135, 196, 116, 128, 203, 114, 122,
            203, 108, 125, 188, 102, 111, 194, 98, 111, 182, 89, 109, 182, 87, 239, 248,
            238, 216, 237, 211, 181, 220, 169, 178, 220, 168, 179, 217, 165, 175, 215,
            161, 171, 211, 155, 152, 205, 136, 144, 206, 127, 137, 201, 120, 131, 206,
            119, 118, 194, 100, 114, 193, 88, 77, 153, 63, 244, 250, 242, 230, 244, 227,
            180, 218, 166, 159, 210, 145, 154, 212, 141, 154, 202, 135, 154, 199, 135,
            150, 199, 131, 126, 199, 111, 131, 190, 109, 126, 193, 105, 127, 184, 105,
            125, 183, 102, 119, 188, 96, 113, 190, 95, 106, 185, 80, 100, 176, 76, 94,
            169, 72, 82, 160, 66, 105, 63, 34, 115, 0, 0, 0, 39, 116, 82, 78, 83, 0, 34,
            34, 243, 243, 230, 229, 219, 125, 83, 83, 83, 34, 246, 246, 246, 246, 244,
            244, 244, 244, 230, 230, 230, 229, 219, 219, 219, 219, 219, 219, 126, 126,
            126, 125, 125, 125, 83, 83, 1, 158, 248, 195, 0, 0, 0, 201, 73, 68, 65, 84,
            24, 211, 109, 202, 213, 118, 194, 80, 20, 69, 81, 130, 183, 165, 45, 238,
            110, 185, 55, 70, 60, 33, 193, 221, 221, 225, 255, 191, 131, 3, 12, 222,
            216, 111, 107, 142, 109, 249, 56, 34, 31, 179, 217, 92, 5, 226, 221, 165,
            208, 72, 20, 4, 241, 28, 254, 122, 117, 217, 215, 227, 165, 193, 64, 162,
            250, 254, 167, 16, 209, 30, 165, 49, 44, 195, 104, 148, 226, 244, 0, 100,
            70, 188, 198, 178, 8, 161, 202, 134, 186, 230, 0, 92, 162, 196, 32, 84, 173,
            86, 200, 169, 44, 39, 0, 126, 155, 42, 203, 215, 161, 57, 121, 215, 254, 7,
            248, 19, 84, 181, 70, 214, 72, 174, 139, 245, 182, 23, 32, 62, 95, 12, 251,
            19, 146, 163, 77, 76, 175, 82, 0, 217, 75, 99, 120, 82, 234, 93, 211, 196,
            179, 177, 27, 192, 227, 84, 154, 71, 108, 24, 6, 110, 237, 29, 86, 11, 236,
            59, 176, 109, 208, 186, 78, 183, 14, 193, 31, 200, 135, 68, 110, 203, 78,
            103, 61, 118, 64, 191, 102, 45, 38, 237, 246, 180, 27, 254, 31, 118, 7, 206,
            167, 30, 83, 85, 65, 228, 254, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130
        };

        private static readonly byte[] SampleAsteriskOrangePng =
        {
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16,
            0, 0, 0, 16, 8, 3, 0, 0, 0, 40, 45, 15, 83, 0, 0, 1, 20, 80, 76, 84, 69, 0,
            0, 0, 243, 142, 1, 223, 121, 3, 237, 137, 2, 247, 147, 1, 251, 151, 0, 235,
            133, 2, 229, 127, 2, 252, 152, 0, 214, 111, 4, 238, 137, 1, 238, 138, 2,
            243, 143, 1, 233, 132, 2, 243, 143, 1, 243, 143, 1, 203, 99, 5, 231, 130, 2,
            201, 96, 5, 224, 121, 3, 198, 94, 6, 230, 128, 3, 226, 124, 3, 235, 134, 2,
            245, 145, 1, 229, 127, 3, 228, 126, 3, 223, 121, 3, 211, 108, 5, 227, 126,
            3, 225, 123, 3, 201, 98, 6, 210, 107, 5, 216, 113, 4, 230, 129, 3, 225, 123,
            3, 218, 116, 4, 224, 122, 3, 235, 134, 2, 234, 133, 2, 223, 122, 3, 250,
            151, 1, 246, 147, 1, 254, 155, 0, 251, 151, 0, 221, 119, 4, 244, 144, 1,
            253, 154, 0, 199, 95, 6, 246, 146, 1, 241, 141, 1, 255, 183, 71, 255, 188,
            82, 254, 186, 79, 255, 181, 66, 255, 189, 85, 255, 184, 74, 252, 180, 73,
            251, 177, 68, 250, 174, 61, 249, 171, 59, 250, 173, 56, 243, 160, 49, 255,
            196, 98, 254, 192, 90, 252, 180, 69, 252, 177, 65, 245, 162, 45, 243, 157,
            38, 240, 152, 35, 228, 134, 20, 218, 114, 4, 246, 146, 1, 244, 143, 1, 255,
            199, 107, 242, 161, 55, 246, 165, 54, 250, 171, 52, 249, 168, 51, 251, 170,
            45, 239, 154, 42, 238, 151, 39, 227, 136, 36, 230, 140, 33, 253, 165, 30,
            246, 156, 26, 249, 159, 23, 253, 164, 22, 213, 115, 19, 248, 155, 15, 226,
            124, 3, 252, 153, 0, 191, 166, 230, 221, 0, 0, 0, 51, 116, 82, 78, 83, 0,
            204, 187, 187, 187, 187, 85, 51, 51, 17, 17, 238, 238, 204, 187, 153, 119,
            102, 85, 34, 238, 238, 238, 238, 238, 221, 221, 221, 204, 204, 204, 187,
            187, 187, 187, 170, 153, 153, 153, 136, 119, 119, 102, 102, 85, 68, 68, 68,
            51, 34, 34, 74, 80, 210, 194, 0, 0, 0, 198, 73, 68, 65, 84, 24, 211, 109,
            140, 69, 178, 194, 80, 0, 4, 39, 70, 32, 56, 124, 119, 119, 127, 18, 15,
            110, 31, 119, 187, 255, 61, 40, 120, 149, 29, 189, 235, 169, 169, 198, 62,
            162, 218, 250, 3, 120, 107, 166, 254, 132, 191, 207, 57, 211, 0, 201, 234,
            197, 35, 187, 225, 123, 82, 44, 44, 127, 191, 166, 102, 41, 174, 139, 203,
            107, 191, 224, 167, 211, 62, 173, 102, 195, 136, 218, 45, 38, 124, 90, 121,
            18, 197, 40, 96, 36, 76, 198, 202, 73, 3, 208, 117, 104, 179, 230, 73, 74,
            42, 89, 196, 77, 222, 157, 173, 234, 50, 84, 246, 79, 109, 155, 18, 78, 28,
            207, 177, 58, 183, 80, 91, 45, 73, 81, 92, 194, 221, 75, 249, 188, 209, 184,
            193, 22, 227, 152, 149, 137, 119, 21, 67, 136, 82, 113, 78, 3, 50, 124, 8,
            253, 185, 106, 214, 178, 143, 1, 31, 103, 132, 71, 106, 212, 62, 138, 125,
            214, 185, 183, 248, 17, 195, 97, 48, 120, 1, 46, 218, 163, 131, 156, 184,
            228, 239, 229, 60, 144, 187, 206, 108, 171, 27, 251, 138, 27, 95, 222, 204,
            97, 75, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130
        };

        private static readonly byte[] SampleAwardStarGoldPng = {
            137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16,
            0, 0, 0, 16, 8, 3, 0, 0, 0, 40, 45, 15, 83, 0, 0, 1, 74, 80, 76, 84, 69, 0,
            0, 0, 235, 177, 31, 248, 194, 32, 220, 134, 0, 218, 133, 0, 58, 114, 180,
            39, 90, 159, 211, 116, 0, 236, 166, 10, 243, 185, 24, 215, 122, 0, 234, 173,
            19, 243, 168, 0, 216, 129, 0, 249, 192, 24, 204, 117, 0, 214, 119, 0, 238,
            159, 0, 182, 81, 0, 196, 108, 0, 236, 175, 19, 149, 136, 76, 211, 113, 0,
            236, 166, 0, 214, 120, 0, 189, 91, 0, 115, 133, 126, 212, 113, 0, 209, 109,
            0, 204, 119, 0, 237, 175, 11, 228, 155, 0, 222, 150, 0, 245, 173, 0, 233,
            171, 15, 210, 115, 0, 210, 128, 0, 200, 110, 0, 244, 213, 112, 246, 221,
            137, 245, 217, 126, 103, 167, 206, 100, 164, 204, 249, 231, 172, 248, 225,
            155, 245, 215, 120, 244, 215, 117, 247, 212, 109, 247, 201, 64, 236, 186,
            55, 153, 193, 221, 150, 188, 218, 139, 177, 211, 108, 174, 210, 105, 171,
            208, 95, 159, 201, 89, 152, 197, 67, 126, 189, 84, 129, 182, 46, 99, 167,
            248, 227, 161, 246, 215, 124, 243, 213, 109, 239, 195, 85, 242, 199, 82,
            225, 155, 28, 227, 167, 21, 168, 209, 229, 166, 207, 228, 164, 204, 226,
            157, 196, 221, 129, 181, 213, 111, 178, 211, 117, 165, 205, 97, 161, 202,
            93, 155, 199, 100, 149, 198, 250, 237, 195, 94, 142, 193, 71, 131, 193, 138,
            175, 187, 64, 121, 185, 51, 105, 171, 42, 94, 162, 115, 152, 158, 143, 171,
            149, 246, 222, 141, 246, 221, 139, 246, 220, 139, 244, 217, 134, 245, 215,
            131, 192, 185, 122, 243, 211, 102, 238, 199, 100, 243, 210, 99, 183, 164,
            91, 193, 177, 81, 240, 196, 78, 242, 197, 73, 209, 181, 69, 229, 179, 67,
            245, 198, 63, 223, 170, 61, 233, 177, 58, 218, 179, 54, 234, 181, 52, 245,
            195, 46, 229, 165, 44, 225, 159, 36, 243, 187, 23, 139, 51, 104, 220, 0, 0,
            0, 38, 116, 82, 78, 83, 0, 51, 50, 12, 224, 129, 129, 72, 33, 9, 252, 246,
            243, 237, 228, 228, 219, 216, 213, 195, 180, 178, 177, 174, 159, 159, 154,
            153, 123, 120, 105, 99, 93, 78, 72, 69, 45, 15, 209, 186, 227, 226, 0, 0, 0,
            204, 73, 68, 65, 84, 24, 211, 99, 0, 2, 127, 103, 15, 83, 51, 77, 45, 47,
            183, 32, 6, 8, 176, 116, 1, 241, 205, 189, 141, 172, 97, 2, 174, 154, 90,
            161, 9, 22, 22, 198, 48, 129, 64, 35, 119, 243, 228, 172, 16, 79, 147, 96,
            168, 0, 171, 143, 113, 64, 174, 126, 188, 137, 21, 27, 3, 76, 196, 47, 90,
            95, 219, 9, 198, 231, 100, 98, 98, 146, 202, 208, 177, 73, 18, 101, 100,
            100, 228, 0, 10, 240, 25, 24, 24, 164, 218, 234, 68, 216, 38, 26, 26, 102,
            58, 41, 48, 48, 40, 242, 232, 251, 106, 235, 168, 107, 232, 106, 132, 71,
            102, 139, 49, 3, 149, 112, 8, 58, 216, 168, 107, 232, 217, 169, 217, 115,
            201, 64, 76, 97, 22, 215, 85, 215, 181, 139, 81, 227, 85, 134, 217, 34, 231,
            160, 174, 167, 22, 167, 198, 194, 0, 3, 34, 81, 97, 106, 246, 122, 26, 142,
            42, 80, 62, 39, 183, 118, 186, 128, 68, 78, 108, 138, 44, 84, 64, 201, 208,
            81, 154, 153, 129, 157, 63, 77, 24, 42, 32, 207, 194, 14, 162, 84, 37, 133,
            128, 36, 0, 14, 102, 32, 40, 112, 65, 23, 171, 0, 0, 0, 0, 73, 69, 78, 68,
            174, 66, 96, 130
        };

        #endregion Sample data
    }
}