#region Copyright 2022 Vonhoff, MaxtorCoder

/* This file is part of ResourcePackerGUI.
 *
 * ResourcePackerGUI is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * ResourcePackerGUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with ResourcePackerGUI.
 * If not, see <https://www.gnu.org/licenses/>.
 */

#endregion

using System.ComponentModel;

namespace ResourcePacker.Controls
{
    public partial class TriStateTreeView : UserControl
    {
        /// <summary>
        /// <see cref="_ignoreClickAction"/> is used to ignore messages generated by setting the <c>Checked</c> flag in code. <br/>
        /// Do not set <c>e.Cancel = true</c> in <c>OnBeforeCheck</c>, the Checked state will be lost otherwise.
        /// </summary>
        private int _ignoreClickAction;

        public TriStateTreeView()
        {
            InitializeComponent();
            InitializeCheckboxGraphics();
        }

        public event EventHandler<TreeViewEventArgs>? NodeStateChanged;

        public event EventHandler<TreeViewEventArgs>? AfterStateChanged;

        /// <summary>
        /// CheckedState is an enum of all allowable nodes states.
        /// </summary>
        public enum CheckedState
        {
            Unchecked,
            Checked,
            Mixed
        }

        /// <summary>
        /// <see cref="TriStateStyles"/> is an enum of all allowable tree styles. <br/>
        /// </summary>
        /// <remarks>
        /// All styles check children when parent is checked.
        /// Installer automatically checks parent if all children are checked,
        /// and un-checks parent if all children are unchecked.
        /// Standard never changes the checked status of a parent.
        /// </remarks>
        public enum TriStateStyles
        {
            Standard,
            Installer
        }

        public TreeNodeCollection Nodes => treeView.Nodes;

        [Category("Tri-State Tree View")]
        [DisplayName("Style")]
        [Description("Style of the Tri-State Tree View")]
        public TriStateStyles TriStateStyleProperty { get; set; } = TriStateStyles.Standard;

        /// <summary>
        /// Expands all the tree nodes.
        /// </summary>
        public void ExpandAll()
        {
            treeView.ExpandAll();
        }

        /// <summary>
        /// Disables any redrawing of the tree view.
        /// </summary>
        public void BeginUpdate()
        {
            treeView.BeginUpdate();
        }

        /// <summary>
        /// Enables the redrawing of the tree view.
        /// </summary>
        public void EndUpdate()
        {
            treeView.EndUpdate();
        }

        private static void UpdateChildState(TreeNodeCollection nodes, int treeNodeStateImageIndex,
                    bool treeNodeChecked, bool changeUninitializedNodesOnly)
        {
            foreach (TreeNode child in nodes)
            {
                if (changeUninitializedNodesOnly && child.StateImageIndex != -1)
                {
                    continue;
                }

                child.StateImageIndex = treeNodeStateImageIndex;
                child.Checked = treeNodeChecked;

                if (child.Nodes.Count > 0)
                {
                    UpdateChildState(child.Nodes, treeNodeStateImageIndex, treeNodeChecked, changeUninitializedNodesOnly);
                }
            }
        }

        private void AfterCheck(object sender, TreeViewEventArgs e)
        {
            NodeStateChanged?.Invoke(sender, new TreeViewEventArgs(e.Node));

            if (_ignoreClickAction > 0)
            {
                return;
            }

            // Changes are made to the tree, ignore any other change requests.
            _ignoreClickAction++;

            // The checked state has already been changed, we just need to update the state index
            // Node is either ticked or un-ticked.
            // Ignore mixed state, as the node is still only ticked or un-ticked regardless of state of children.
            var treeNode = e.Node;
            if (treeNode != null)
            {
                treeNode.StateImageIndex = treeNode.Checked ? (int)CheckedState.Checked : (int)CheckedState.Unchecked;

                // Force all children to inherit the same state as the current node.
                if (treeNode.Nodes.Count > 0)
                {
                    UpdateChildState(treeNode.Nodes, treeNode.StateImageIndex, treeNode.Checked, false);
                }

                // Populate state up the tree, possibly resulting in parents with mixed state.
                if (treeNode.Parent != null)
                {
                    UpdateParentState(treeNode.Parent);
                }
            }

            _ignoreClickAction--;
            AfterStateChanged?.Invoke(sender, e);
        }

        private void AfterExpand(object sender, TreeViewEventArgs e)
        {
            if (e.Node?.Nodes == null)
            {
                return;
            }

            // We're making changes to the tree, ignore any other change requests.
            _ignoreClickAction++;
            UpdateChildState(e.Node.Nodes, e.Node.StateImageIndex, e.Node.Checked, true);
            _ignoreClickAction--;
        }

        /// <summary>
        /// Generates the required checkbox graphics when necessary.
        /// </summary>
        private void InitializeCheckboxGraphics()
        {
            treeView.StateImageList ??= new ImageList();
            if (treeView.StateImageList.Images.Count >= 3)
            {
                return;
            }

            for (var i = treeView.StateImageList.Images.Count; i < 3; i++)
            {
                // Creates a bitmap which holds the relevant check box style
                // see http://msdn.microsoft.com/en-us/library/ms404307.aspx and
                // http://msdn.microsoft.com/en-us/library/system.windows.forms.checkboxrenderer.aspx

                var bitmap = new Bitmap(16, 16);
                var graphics = Graphics.FromImage(bitmap);

                switch (i)
                {
                    case 0:
                    {
                        CheckBoxRenderer.DrawCheckBox(graphics, Point.Empty,
                            System.Windows.Forms.VisualStyles.CheckBoxState.UncheckedNormal);
                        break;
                    }
                    case 1:
                    {
                        CheckBoxRenderer.DrawCheckBox(graphics, Point.Empty,
                            System.Windows.Forms.VisualStyles.CheckBoxState.CheckedNormal);
                        break;
                    }
                    case 2:
                    {
                        CheckBoxRenderer.DrawCheckBox(graphics, Point.Empty,
                            System.Windows.Forms.VisualStyles.CheckBoxState.MixedNormal);
                        break;
                    }
                    default:
                    {
                        return;
                    }
                }

                treeView.StateImageList.Images.Add(bitmap);
            }
        }

        private void NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            // Has the checkbox been clicked? If not, discard it.
            var info = treeView.HitTest(e.X, e.Y);
            if (info.Location != TreeViewHitTestLocations.StateImage)
            {
                return;
            }

            // Toggle the node's checked status. This will then fire OnAfterCheck.
            var treeNode = e.Node;
            treeNode.Checked = !treeNode.Checked;
        }

        /// <summary>
        /// Helper function to notify parent it may need to use 'mixed' state.
        /// </summary>
        /// <param name="treeNode">The tree node to update the parent from.</param>
        private void UpdateParentState(TreeNode treeNode)
        {
            while (true)
            {
                var origStateImageIndex = treeNode.StateImageIndex;
                var hasCheckedNodes = false;
                var hasUncheckedNodes = false;
                var hasMixedNodes = false;

                // The parent needs to know how many of it's children are Checked or Mixed.
                foreach (TreeNode child in treeNode.Nodes)
                {
                    if (child.StateImageIndex == (int)CheckedState.Checked)
                    {
                        hasCheckedNodes = true;
                    }
                    else if (child.StateImageIndex == (int)CheckedState.Mixed)
                    {
                        hasMixedNodes = true;
                        break;
                    }
                    else
                    {
                        hasUncheckedNodes = true;
                    }

                    if (hasCheckedNodes && hasUncheckedNodes)
                    {
                        hasMixedNodes = true;
                        break;
                    }
                }

                // In Installer mode, if all child nodes are checked then parent is checked.
                if (TriStateStyleProperty == TriStateStyles.Installer && !hasMixedNodes)
                {
                    if (hasUncheckedNodes)
                    {
                        if (!hasCheckedNodes)
                        {
                            treeNode.Checked = false;
                        }
                    }
                    else
                    {
                        treeNode.Checked = true;
                    }
                }

                // Determines the parent's new image state.
                if (hasMixedNodes)
                {
                    treeNode.StateImageIndex = (int)CheckedState.Mixed;
                }
                else
                {
                    treeNode.StateImageIndex = hasCheckedNodes switch
                    {
                        true when !hasUncheckedNodes => treeNode.Checked ? (int)CheckedState.Checked : (int)CheckedState.Mixed,
                        true => (int)CheckedState.Mixed,
                        _ => treeNode.Checked ? (int)CheckedState.Mixed : (int)CheckedState.Unchecked
                    };
                }

                if (origStateImageIndex != treeNode.StateImageIndex && treeNode.Parent != null)
                {
                    // Parent's state has changed, notify the parent's parent.
                    treeNode = treeNode.Parent;
                    continue;
                }

                break;
            }
        }
    }
}